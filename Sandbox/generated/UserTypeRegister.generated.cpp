//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DYEditorCodeGenerator.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "UserTypeRegister.h"

#include "TypeRegistry.h"
#include "Serialization/SerializedObjectFactory.h"
#include "ImGui/ImGuiUtil.h"

// Insert user headers here...
#include "include/TestComponents.h"
#include "include/AnotherTestComponents.h"
#include "include/SystemExample.h"

using namespace DYE::DYEntity;

namespace DYE::DYEditor
{
	void userRegisterTypeFunction()
	{
		// Insert user type registration here...

		// Component located in include/TestComponents.h
		TypeRegistry::RegisterComponentType<TestNamespace::TestComponentA>
			(
				"TestA",
				ComponentTypeFunctionCollection
					{
						.Serialize = [](Entity& entity, SerializedEntity& serializedEntity)
						{
							SerializedComponentHandle serializedComponent = serializedEntity.TryAddComponentOfType("TestA");

							auto const& component = entity.GetComponent<TestNamespace::TestComponentA>();
							serializedComponent.SetPrimitiveTypePropertyValue("FloatValue", component.FloatValue);
							serializedComponent.SetPrimitiveTypePropertyValue("IntegerValue", component.IntegerValue);

							return SerializationResult {};
						},
						.DrawInspector = [](Entity &entity)
						{
							bool changed = false;
							ImGui::TextWrapped("TestNamespace::TestComponentA");
							changed |= ImGuiUtil::DrawFloatControl("FloatValue", entity.GetComponent<TestNamespace::TestComponentA>().FloatValue);
							changed |= ImGuiUtil::DrawIntControl("IntegerValue", entity.GetComponent<TestNamespace::TestComponentA>().IntegerValue);
							ImGui::BeginDisabled(true); ImGuiUtil::DrawReadOnlyTextWithLabel("intCannotBeSerialized", "Variable of unsupported type 'int'"); ImGui::EndDisabled();
							return changed;
						}
					}
			);

		// Component located in include/TestComponents.h
		TypeRegistry::RegisterComponentType<TestNamespace::Subnamespace::SubtestComponentA>
			(
				"SubTestA",
				ComponentTypeFunctionCollection
					{
						.DrawInspector = [](Entity &entity)
						{
							bool changed = false;
							ImGui::TextWrapped("TestNamespace::Subnamespace::SubtestComponentA");
							changed |= ImGuiUtil::DrawIntControl("IntegerValue", entity.GetComponent<TestNamespace::Subnamespace::SubtestComponentA>().IntegerValue);
							return changed;
						}
					}
			);

		// Component located in include/TestComponents.h
		TypeRegistry::RegisterComponentType<TestComponentB>
			(
				"TestB",
				ComponentTypeFunctionCollection
					{
						.DrawInspector = [](Entity &entity)
						{
							bool changed = false;
							ImGui::TextWrapped("TestComponentB");
							changed |= ImGuiUtil::DrawBoolControl("BooleanValue", entity.GetComponent<TestComponentB>().BooleanValue);
							changed |= ImGuiUtil::DrawCharControl("OneCharacter", entity.GetComponent<TestComponentB>().OneCharacter);
							ImGui::BeginDisabled(true); ImGuiUtil::DrawReadOnlyTextWithLabel("ConstantFloat", "Constant variable of type 'Float'"); ImGui::EndDisabled();
							ImGui::BeginDisabled(true); ImGuiUtil::DrawReadOnlyTextWithLabel("ConstantVector3", "Constant variable of type 'Vector3'"); ImGui::EndDisabled();
							changed |= ImGuiUtil::DrawVector3Control("Position", entity.GetComponent<TestComponentB>().Position);
							changed |= ImGuiUtil::DrawVector4Control("vec4", entity.GetComponent<TestComponentB>().vec4);
							return changed;
						}
					}
			);

		// Component located in include/AnotherTestComponents.h
		TypeRegistry::RegisterComponentType<TestComponentC>
			(
				"TestC",
				ComponentTypeFunctionCollection
					{
						.DrawInspector = [](Entity &entity)
						{
							bool changed = false;
							ImGui::TextWrapped("TestComponentC");
							changed |= ImGuiUtil::DrawColor4Control("ColorValue", entity.GetComponent<TestComponentC>().ColorValue);
							changed |= ImGuiUtil::DrawTextControl("TestName", entity.GetComponent<TestComponentC>().TestName);
							return changed;
						}
					}
			);

		// System located in include/SystemExample.h
		static DerivedSystemA _DerivedSystemA;
		TypeRegistry::RegisterSystem("Derived System A", &_DerivedSystemA);

		// System located in include/SystemExample.h
		static SystemNamespace::DerivedSystemB _DerivedSystemB;
		TypeRegistry::RegisterSystem("Derived System B", &_DerivedSystemB);

	}

	class UserTypeRegister_Generated
	{
	public:
		UserTypeRegister_Generated()
		{
			DYE::DYEditor::AssignRegisterUserTypeFunctionPointer(userRegisterTypeFunction);
		}
	};

	[[maybe_unused]]
	static UserTypeRegister_Generated userTypeRegister_GeneratedInstance = UserTypeRegister_Generated();
}
